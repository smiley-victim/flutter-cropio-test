// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'plantdataentity_model.dart';





export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 164763747818648149),
      name: 'CalculationMethodologyEntity',
      lastPropertyId: const obx_int.IdUid(2, 74007951317749550),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1950396897837563482),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 74007951317749550),
            name: 'fertilizerRequirementFormula',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2355378516789816234),
      name: 'CareInstructionsEntity',
      lastPropertyId: const obx_int.IdUid(6, 4460635415952548209),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 563135148657546203),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3462061587449986503),
            name: 'temperature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 136101372750254239),
            name: 'soilType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3158522792218029187),
            name: 'watering',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5803430508762872483),
            name: 'sunlight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4460635415952548209),
            name: 'fertilization',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7915496696002255436),
      name: 'ClimateAdjustmentEntity',
      lastPropertyId: const obx_int.IdUid(3, 2587268294691520270),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 798612269456043897),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2805263817327330616),
            name: 'temperature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2587268294691520270),
            name: 'humidity',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 5039589478510504522),
      name: 'ClimateChangeAdaptationEntity',
      lastPropertyId: const obx_int.IdUid(4, 459787620993952314),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5326321973103975733),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6583526808129494150),
            name: 'floodResistance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1626700521038151770),
            name: 'extremeHeatResistance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 459787620993952314),
            name: 'stormProtection',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 337208322344327987),
      name: 'ClimateSuitabilityEntity',
      lastPropertyId: const obx_int.IdUid(3, 5911292289981661360),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6299047628856301033),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7885463626747568741),
            name: 'region',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5911292289981661360),
            name: 'climate',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 4373675074136538547),
      name: 'CompanionPlantEntity',
      lastPropertyId: const obx_int.IdUid(3, 4065842842005994055),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3928510164602633757),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5398322745494782044),
            name: 'plant',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4065842842005994055),
            name: 'benefit',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4175130494204066276),
      name: 'DiseaseEntity',
      lastPropertyId: const obx_int.IdUid(4, 6107980915271782665),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1849468297117581703),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2933204430826573029),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4165657610357855755),
            name: 'symptoms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6107980915271782665),
            name: 'remedy',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 1687905376745447587),
      name: 'EconomicAnalysisEntity',
      lastPropertyId: const obx_int.IdUid(5, 5732996965770011488),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5960999039709258204),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1989589150405851503),
            name: 'costOfCultivation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5143580904587262117),
            name: 'expectedRevenue',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 15615331491163796),
            name: 'profitMargin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5732996965770011488),
            name: 'roi',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 4474817872622427571),
      name: 'FertilizerApplicationEntity',
      lastPropertyId: const obx_int.IdUid(5, 3564443025771254553),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6275885087593751221),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7089997027614181861),
            name: 'stage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7774426762842911918),
            name: 'fertilizerType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8737284051306818409),
            name: 'applicationFrequency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3564443025771254553),
            name: 'importance',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 1724753839124193),
      name: 'FertilizerCalculationEntity',
      lastPropertyId: const obx_int.IdUid(2, 3003379976041697519),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1993532782049099585),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3003379976041697519),
            name: 'calculationMethodologyId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5217773767424316173),
            relationTarget: 'CalculationMethodologyEntity')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 9101578003747003338),
            name: 'stages',
            targetId: const obx_int.IdUid(26, 7512676361396480154))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 804250516854587451),
      name: 'FertilizerQuantityEntity',
      lastPropertyId: const obx_int.IdUid(4, 5107841643735669351),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4731898123383329438),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5792827900353354358),
            name: 'npkId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7596384184463767394),
            relationTarget: 'NpkEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1200390416952901974),
            name: 'compost',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5107841643735669351),
            name: 'frequency',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 7736488439435272566),
      name: 'GeneticVarietyEntity',
      lastPropertyId: const obx_int.IdUid(3, 8108816680040658658),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 896495838671534714),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4991011237966957508),
            name: 'variety',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8108816680040658658),
            name: 'characteristics',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 7658116442038128418),
      name: 'GrowingConditionsEntity',
      lastPropertyId: const obx_int.IdUid(10, 6389322358515822205),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3193420771559519171),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 641839310457151893),
            name: 'sunlight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7851407960908252066),
            name: 'water',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8625451066498994407),
            name: 'temperature',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2403429172964830854),
            name: 'humidity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1824389792738998782),
            name: 'soilType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5930749016645842073),
            name: 'soilPH',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6704983385510369005),
            name: 'windResistance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 376020157940195565),
            name: 'frostTolerance',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6389322358515822205),
            name: 'droughtTolerance',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 4206485721382984567),
            name: 'climateSuitability',
            targetId: const obx_int.IdUid(5, 337208322344327987))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 1160964543131673967),
      name: 'GrowthStageEntity',
      lastPropertyId: const obx_int.IdUid(4, 3815501960592655396),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7410948255698701861),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8960620225531785311),
            name: 'stage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5727377730945484233),
            name: 'duration',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3815501960592655396),
            name: 'careInstructionsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 5978968984119983531),
            relationTarget: 'CareInstructionsEntity')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 7296041596970981748),
            name: 'tasks',
            targetId: const obx_int.IdUid(28, 5115273988655933497))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 539511415517808772),
      name: 'HarvestInfoEntity',
      lastPropertyId: const obx_int.IdUid(8, 8558324102646631024),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8505711995162445022),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4593634528309891868),
            name: 'season',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8159328235021341382),
            name: 'bestHarvestTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1093000703712099892),
            name: 'method',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1157904291141804848),
            name: 'yieldPerTree',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1361672203852369782),
            name: 'yieldPerAcre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3357119591620829467),
            name: 'economicAnalysisId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 4483138885772438772),
            relationTarget: 'EconomicAnalysisEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8558324102646631024),
            name: 'storageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 1068013704674633371),
            relationTarget: 'StorageEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 7483033906111340915),
      name: 'MacronutrientsEntity',
      lastPropertyId: const obx_int.IdUid(4, 7774145251424202684),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 304723621451058780),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 980743317796596558),
            name: 'nitrogen',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3203974443234248156),
            name: 'phosphorus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7774145251424202684),
            name: 'potassium',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 4564776936466123952),
      name: 'MicronutrientsEntity',
      lastPropertyId: const obx_int.IdUid(5, 1969336100865801508),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3185767355758025499),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5630623739673188468),
            name: 'calcium',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1816813022973931467),
            name: 'magnesium',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6199778702649853420),
            name: 'zinc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1969336100865801508),
            name: 'iron',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 3663825658095530806),
      name: 'NpkEntity',
      lastPropertyId: const obx_int.IdUid(4, 4442612125308462160),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 455404625442517696),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 205521108532964660),
            name: 'nitrogen',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 649844304707142973),
            name: 'phosphorus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4442612125308462160),
            name: 'potassium',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 5943422044051146810),
      name: 'NutrientRequirementsEntity',
      lastPropertyId: const obx_int.IdUid(3, 7531392897872804096),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5795254606764617004),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2991688119350684578),
            name: 'macronutrientsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 1866321542388185583),
            relationTarget: 'MacronutrientsEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7531392897872804096),
            name: 'micronutrientsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 1376812220248422334),
            relationTarget: 'MicronutrientsEntity')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 4611731134362393630),
            name: 'fertilizerApplication',
            targetId: const obx_int.IdUid(9, 4474817872622427571))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 2721980440317632817),
      name: 'PestEntity',
      lastPropertyId: const obx_int.IdUid(5, 1527605042984183232),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8730189913208105479),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 132623392798448259),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4508021406140409982),
            name: 'symptoms',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8138425315992793411),
            name: 'controlMethods',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1527605042984183232),
            name: 'biologicalControl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(21, 6273006623455034251),
      name: 'PlantDataEntity',
      lastPropertyId: const obx_int.IdUid(16, 7239274929442003908),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3475280301861318944),
            name: 'objectBoxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4472719933754842896),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3125020855766659359),
            name: 'plant',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8735326731201811913),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6033235711500842936),
            name: 'plantClass',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3416934714395997592),
            name: 'scientificName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1623943876638742019),
            name: 'imageUrl',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6110124001108112900),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 133457898558291926),
            name: 'growingConditionsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 1560278260543403670),
            relationTarget: 'GrowingConditionsEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1664045421732805326),
            name: 'nutrientRequirementsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(9, 5276753415038359051),
            relationTarget: 'NutrientRequirementsEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2883802271355303763),
            name: 'pollinationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 4499919191273214828),
            relationTarget: 'PollinationEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7461736507682221825),
            name: 'harvestInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 5360622539291639888),
            relationTarget: 'HarvestInfoEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7381301066323383866),
            name: 'propagationMethodsId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 8049558078779105698),
            relationTarget: 'PropagationMethodsEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6880817360516577528),
            name: 'climateChangeAdaptationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 3197597993197859200),
            relationTarget: 'ClimateChangeAdaptationEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 6230552407583533336),
            name: 'traditionalUsesId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 5765816507881484215),
            relationTarget: 'TraditionalUsesEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7239274929442003908),
            name: 'fertilizerCalculationId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(15, 1299784017956164268),
            relationTarget: 'FertilizerCalculationEntity')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 4168573333396993633),
            name: 'pests',
            targetId: const obx_int.IdUid(20, 2721980440317632817)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 7691103654750574057),
            name: 'disease',
            targetId: const obx_int.IdUid(7, 4175130494204066276)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(7, 6762257610284432275),
            name: 'companionPlants',
            targetId: const obx_int.IdUid(6, 4373675074136538547)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 50637553766096737),
            name: 'geneticVarieties',
            targetId: const obx_int.IdUid(12, 7736488439435272566)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 3620566281248024872),
            name: 'growthStages',
            targetId: const obx_int.IdUid(14, 1160964543131673967))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(22, 3869839720631798174),
      name: 'PollinationEntity',
      lastPropertyId: const obx_int.IdUid(5, 5387908477732008984),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3607051220050571843),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1824549083898891684),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 457398850021728730),
            name: 'pollinators',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 864188175318705097),
            name: 'floweringSeason',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5387908477732008984),
            name: 'importance',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(23, 5471360184801473722),
      name: 'PropagationMethodsEntity',
      lastPropertyId: const obx_int.IdUid(5, 3425321409620346824),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6922395493017275248),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7770367628125479457),
            name: 'seeds',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2542952408223633081),
            name: 'grafting',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5666614321892572076),
            name: 'airLayering',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3425321409620346824),
            name: 'tissueCulture',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(24, 967456297818223568),
      name: 'ReminderConfigEntity',
      lastPropertyId: const obx_int.IdUid(4, 7757466528183320651),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7987538516713155548),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1557243877431303809),
            name: 'timeFrame',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4256362290999816729),
            name: 'repeatInterval',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7757466528183320651),
            name: 'alertDuration',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(25, 8619000828764670574),
      name: 'SoilAdjustmentEntity',
      lastPropertyId: const obx_int.IdUid(3, 7685527943276927668),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6399784771125299824),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8334672435379133455),
            name: 'soilType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7685527943276927668),
            name: 'climateAdjustmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(16, 4567906275262741507),
            relationTarget: 'ClimateAdjustmentEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(26, 7512676361396480154),
      name: 'StageFertilizerEntity',
      lastPropertyId: const obx_int.IdUid(6, 8645820949598727981),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2376553791975394254),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 590835251160563808),
            name: 'stage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 877999648578513160),
            name: 'fertilizerType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8123235480409025505),
            name: 'fertilizerQuantityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(17, 992988590773956166),
            relationTarget: 'FertilizerQuantityEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6506190724524524893),
            name: 'soilAdjustmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(18, 4775950731881106980),
            relationTarget: 'SoilAdjustmentEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8645820949598727981),
            name: 'importance',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(27, 5637286946147533021),
      name: 'StorageEntity',
      lastPropertyId: const obx_int.IdUid(4, 1679593535529599150),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4240105215702280041),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7315882796595165569),
            name: 'shelfLife',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6590157911333711357),
            name: 'bestStorageConditions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1679593535529599150),
            name: 'storageInnovations',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(28, 5115273988655933497),
      name: 'TaskEntity',
      lastPropertyId: const obx_int.IdUid(4, 8439789374980566093),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3851894991473298604),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1671666539803582077),
            name: 'taskName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1421677729938256564),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8439789374980566093),
            name: 'reminderConfigId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(19, 3999345461488133030),
            relationTarget: 'ReminderConfigEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(29, 3798650747709194854),
      name: 'TraditionalUsesEntity',
      lastPropertyId: const obx_int.IdUid(4, 4583901430322994837),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6551866535110597851),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3947270570371325726),
            name: 'ayurveda',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5086336411807822721),
            name: 'folkMedicine',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4583901430322994837),
            name: 'culinaryUses',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(29, 3798650747709194854),
      lastIndexId: const obx_int.IdUid(19, 3999345461488133030),
      lastRelationId: const obx_int.IdUid(9, 3620566281248024872),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CalculationMethodologyEntity:
        obx_int.EntityDefinition<CalculationMethodologyEntity>(
            model: _entities[0],
            toOneRelations: (CalculationMethodologyEntity object) => [],
            toManyRelations: (CalculationMethodologyEntity object) => {},
            getId: (CalculationMethodologyEntity object) => object.id,
            setId: (CalculationMethodologyEntity object, int id) {
              object.id = id;
            },
            objectToFB: (CalculationMethodologyEntity object, fb.Builder fbb) {
              final fertilizerRequirementFormulaOffset =
                  fbb.writeString(object.fertilizerRequirementFormula);
              fbb.startTable(3);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, fertilizerRequirementFormulaOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final fertilizerRequirementFormulaParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final object = CalculationMethodologyEntity(
                  id: idParam,
                  fertilizerRequirementFormula:
                      fertilizerRequirementFormulaParam);

              return object;
            }),
    CareInstructionsEntity: obx_int.EntityDefinition<CareInstructionsEntity>(
        model: _entities[1],
        toOneRelations: (CareInstructionsEntity object) => [],
        toManyRelations: (CareInstructionsEntity object) => {},
        getId: (CareInstructionsEntity object) => object.id,
        setId: (CareInstructionsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CareInstructionsEntity object, fb.Builder fbb) {
          final temperatureOffset = fbb.writeString(object.temperature);
          final soilTypeOffset = fbb.writeString(object.soilType);
          final wateringOffset = fbb.writeString(object.watering);
          final sunlightOffset = fbb.writeString(object.sunlight);
          final fertilizationOffset = fbb.writeString(object.fertilization);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, temperatureOffset);
          fbb.addOffset(2, soilTypeOffset);
          fbb.addOffset(3, wateringOffset);
          fbb.addOffset(4, sunlightOffset);
          fbb.addOffset(5, fertilizationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final temperatureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final soilTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final wateringParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sunlightParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final fertilizationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = CareInstructionsEntity(
              id: idParam,
              temperature: temperatureParam,
              soilType: soilTypeParam,
              watering: wateringParam,
              sunlight: sunlightParam,
              fertilization: fertilizationParam);

          return object;
        }),
    ClimateAdjustmentEntity: obx_int.EntityDefinition<ClimateAdjustmentEntity>(
        model: _entities[2],
        toOneRelations: (ClimateAdjustmentEntity object) => [],
        toManyRelations: (ClimateAdjustmentEntity object) => {},
        getId: (ClimateAdjustmentEntity object) => object.id,
        setId: (ClimateAdjustmentEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ClimateAdjustmentEntity object, fb.Builder fbb) {
          final temperatureOffset = fbb.writeString(object.temperature);
          final humidityOffset = fbb.writeString(object.humidity);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, temperatureOffset);
          fbb.addOffset(2, humidityOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final temperatureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final humidityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = ClimateAdjustmentEntity(
              id: idParam,
              temperature: temperatureParam,
              humidity: humidityParam);

          return object;
        }),
    ClimateChangeAdaptationEntity:
        obx_int.EntityDefinition<ClimateChangeAdaptationEntity>(
            model: _entities[3],
            toOneRelations: (ClimateChangeAdaptationEntity object) => [],
            toManyRelations: (ClimateChangeAdaptationEntity object) => {},
            getId: (ClimateChangeAdaptationEntity object) => object.id,
            setId: (ClimateChangeAdaptationEntity object, int id) {
              object.id = id;
            },
            objectToFB: (ClimateChangeAdaptationEntity object, fb.Builder fbb) {
              final floodResistanceOffset =
                  fbb.writeString(object.floodResistance);
              final extremeHeatResistanceOffset =
                  fbb.writeString(object.extremeHeatResistance);
              final stormProtectionOffset =
                  fbb.writeString(object.stormProtection);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, floodResistanceOffset);
              fbb.addOffset(2, extremeHeatResistanceOffset);
              fbb.addOffset(3, stormProtectionOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final floodResistanceParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, '');
              final extremeHeatResistanceParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final stormProtectionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, '');
              final object = ClimateChangeAdaptationEntity(
                  id: idParam,
                  floodResistance: floodResistanceParam,
                  extremeHeatResistance: extremeHeatResistanceParam,
                  stormProtection: stormProtectionParam);

              return object;
            }),
    ClimateSuitabilityEntity:
        obx_int.EntityDefinition<ClimateSuitabilityEntity>(
            model: _entities[4],
            toOneRelations: (ClimateSuitabilityEntity object) => [],
            toManyRelations: (ClimateSuitabilityEntity object) => {},
            getId: (ClimateSuitabilityEntity object) => object.id,
            setId: (ClimateSuitabilityEntity object, int id) {
              object.id = id;
            },
            objectToFB: (ClimateSuitabilityEntity object, fb.Builder fbb) {
              final regionOffset = fbb.writeString(object.region);
              final climateOffset = fbb.writeString(object.climate);
              fbb.startTable(4);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, regionOffset);
              fbb.addOffset(2, climateOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final regionParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final climateParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final object = ClimateSuitabilityEntity(
                  id: idParam, region: regionParam, climate: climateParam);

              return object;
            }),
    CompanionPlantEntity: obx_int.EntityDefinition<CompanionPlantEntity>(
        model: _entities[5],
        toOneRelations: (CompanionPlantEntity object) => [],
        toManyRelations: (CompanionPlantEntity object) => {},
        getId: (CompanionPlantEntity object) => object.id,
        setId: (CompanionPlantEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CompanionPlantEntity object, fb.Builder fbb) {
          final plantOffset = fbb.writeString(object.plant);
          final benefitOffset = fbb.writeString(object.benefit);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, plantOffset);
          fbb.addOffset(2, benefitOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final plantParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final benefitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = CompanionPlantEntity(
              id: idParam, plant: plantParam, benefit: benefitParam);

          return object;
        }),
    DiseaseEntity: obx_int.EntityDefinition<DiseaseEntity>(
        model: _entities[6],
        toOneRelations: (DiseaseEntity object) => [],
        toManyRelations: (DiseaseEntity object) => {},
        getId: (DiseaseEntity object) => object.id,
        setId: (DiseaseEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DiseaseEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final symptomsOffset = fbb.writeList(
              object.symptoms.map(fbb.writeString).toList(growable: false));
          final remedyOffset = fbb.writeList(
              object.remedy.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, symptomsOffset);
          fbb.addOffset(3, remedyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final symptomsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 8, []);
          final remedyParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = DiseaseEntity(
              id: idParam,
              name: nameParam,
              symptoms: symptomsParam,
              remedy: remedyParam);

          return object;
        }),
    EconomicAnalysisEntity: obx_int.EntityDefinition<EconomicAnalysisEntity>(
        model: _entities[7],
        toOneRelations: (EconomicAnalysisEntity object) => [],
        toManyRelations: (EconomicAnalysisEntity object) => {},
        getId: (EconomicAnalysisEntity object) => object.id,
        setId: (EconomicAnalysisEntity object, int id) {
          object.id = id;
        },
        objectToFB: (EconomicAnalysisEntity object, fb.Builder fbb) {
          final costOfCultivationOffset =
              fbb.writeString(object.costOfCultivation);
          final expectedRevenueOffset = fbb.writeString(object.expectedRevenue);
          final profitMarginOffset = fbb.writeString(object.profitMargin);
          final roiOffset = fbb.writeString(object.roi);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, costOfCultivationOffset);
          fbb.addOffset(2, expectedRevenueOffset);
          fbb.addOffset(3, profitMarginOffset);
          fbb.addOffset(4, roiOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final costOfCultivationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final expectedRevenueParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final profitMarginParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final roiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = EconomicAnalysisEntity(
              id: idParam,
              costOfCultivation: costOfCultivationParam,
              expectedRevenue: expectedRevenueParam,
              profitMargin: profitMarginParam,
              roi: roiParam);

          return object;
        }),
    FertilizerApplicationEntity:
        obx_int.EntityDefinition<FertilizerApplicationEntity>(
            model: _entities[8],
            toOneRelations: (FertilizerApplicationEntity object) => [],
            toManyRelations: (FertilizerApplicationEntity object) => {},
            getId: (FertilizerApplicationEntity object) => object.id,
            setId: (FertilizerApplicationEntity object, int id) {
              object.id = id;
            },
            objectToFB: (FertilizerApplicationEntity object, fb.Builder fbb) {
              final stageOffset = fbb.writeString(object.stage);
              final fertilizerTypeOffset =
                  fbb.writeString(object.fertilizerType);
              final applicationFrequencyOffset =
                  fbb.writeString(object.applicationFrequency);
              final importanceOffset = fbb.writeString(object.importance);
              fbb.startTable(6);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, stageOffset);
              fbb.addOffset(2, fertilizerTypeOffset);
              fbb.addOffset(3, applicationFrequencyOffset);
              fbb.addOffset(4, importanceOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final stageParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final fertilizerTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final applicationFrequencyParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, '');
              final importanceParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, '');
              final object = FertilizerApplicationEntity(
                  id: idParam,
                  stage: stageParam,
                  fertilizerType: fertilizerTypeParam,
                  applicationFrequency: applicationFrequencyParam,
                  importance: importanceParam);

              return object;
            }),
    FertilizerCalculationEntity: obx_int.EntityDefinition<
            FertilizerCalculationEntity>(
        model: _entities[9],
        toOneRelations: (FertilizerCalculationEntity object) =>
            [object.calculationMethodology],
        toManyRelations: (FertilizerCalculationEntity object) => {
              obx_int.RelInfo<FertilizerCalculationEntity>.toMany(1, object.id):
                  object.stages
            },
        getId: (FertilizerCalculationEntity object) => object.id,
        setId: (FertilizerCalculationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (FertilizerCalculationEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.calculationMethodology.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = FertilizerCalculationEntity(id: idParam);
          object.calculationMethodology.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.calculationMethodology.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<FertilizerCalculationEntity>(
              object.stages,
              store,
              obx_int.RelInfo<FertilizerCalculationEntity>.toMany(
                  1, object.id));
          return object;
        }),
    FertilizerQuantityEntity:
        obx_int.EntityDefinition<FertilizerQuantityEntity>(
            model: _entities[10],
            toOneRelations: (FertilizerQuantityEntity object) => [object.npk],
            toManyRelations: (FertilizerQuantityEntity object) => {},
            getId: (FertilizerQuantityEntity object) => object.id,
            setId: (FertilizerQuantityEntity object, int id) {
              object.id = id;
            },
            objectToFB: (FertilizerQuantityEntity object, fb.Builder fbb) {
              final compostOffset = fbb.writeString(object.compost);
              final frequencyOffset = fbb.writeString(object.frequency);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.npk.targetId);
              fbb.addOffset(2, compostOffset);
              fbb.addOffset(3, frequencyOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final compostParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final frequencyParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, '');
              final object = FertilizerQuantityEntity(
                  id: idParam,
                  compost: compostParam,
                  frequency: frequencyParam);
              object.npk.targetId =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
              object.npk.attach(store);
              return object;
            }),
    GeneticVarietyEntity: obx_int.EntityDefinition<GeneticVarietyEntity>(
        model: _entities[11],
        toOneRelations: (GeneticVarietyEntity object) => [],
        toManyRelations: (GeneticVarietyEntity object) => {},
        getId: (GeneticVarietyEntity object) => object.id,
        setId: (GeneticVarietyEntity object, int id) {
          object.id = id;
        },
        objectToFB: (GeneticVarietyEntity object, fb.Builder fbb) {
          final varietyOffset = fbb.writeString(object.variety);
          final characteristicsOffset = fbb.writeString(object.characteristics);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, varietyOffset);
          fbb.addOffset(2, characteristicsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final varietyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final characteristicsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = GeneticVarietyEntity(
              id: idParam,
              variety: varietyParam,
              characteristics: characteristicsParam);

          return object;
        }),
    GrowingConditionsEntity: obx_int.EntityDefinition<GrowingConditionsEntity>(
        model: _entities[12],
        toOneRelations: (GrowingConditionsEntity object) => [],
        toManyRelations: (GrowingConditionsEntity object) => {
              obx_int.RelInfo<GrowingConditionsEntity>.toMany(2, object.id):
                  object.climateSuitability
            },
        getId: (GrowingConditionsEntity object) => object.id,
        setId: (GrowingConditionsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (GrowingConditionsEntity object, fb.Builder fbb) {
          final sunlightOffset = fbb.writeString(object.sunlight);
          final waterOffset = fbb.writeString(object.water);
          final temperatureOffset = fbb.writeString(object.temperature);
          final humidityOffset = fbb.writeString(object.humidity);
          final soilTypeOffset = fbb.writeString(object.soilType);
          final soilPHOffset = fbb.writeString(object.soilPH);
          final windResistanceOffset = fbb.writeString(object.windResistance);
          final frostToleranceOffset = fbb.writeString(object.frostTolerance);
          final droughtToleranceOffset =
              fbb.writeString(object.droughtTolerance);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, sunlightOffset);
          fbb.addOffset(2, waterOffset);
          fbb.addOffset(3, temperatureOffset);
          fbb.addOffset(4, humidityOffset);
          fbb.addOffset(5, soilTypeOffset);
          fbb.addOffset(6, soilPHOffset);
          fbb.addOffset(7, windResistanceOffset);
          fbb.addOffset(8, frostToleranceOffset);
          fbb.addOffset(9, droughtToleranceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sunlightParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final waterParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final temperatureParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final humidityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final soilTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final soilPHParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final windResistanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final frostToleranceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final droughtToleranceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = GrowingConditionsEntity(
              id: idParam,
              sunlight: sunlightParam,
              water: waterParam,
              temperature: temperatureParam,
              humidity: humidityParam,
              soilType: soilTypeParam,
              soilPH: soilPHParam,
              windResistance: windResistanceParam,
              frostTolerance: frostToleranceParam,
              droughtTolerance: droughtToleranceParam);
          obx_int.InternalToManyAccess.setRelInfo<GrowingConditionsEntity>(
              object.climateSuitability,
              store,
              obx_int.RelInfo<GrowingConditionsEntity>.toMany(2, object.id));
          return object;
        }),
    GrowthStageEntity: obx_int.EntityDefinition<GrowthStageEntity>(
        model: _entities[13],
        toOneRelations: (GrowthStageEntity object) => [object.careInstructions],
        toManyRelations: (GrowthStageEntity object) => {
              obx_int.RelInfo<GrowthStageEntity>.toMany(3, object.id):
                  object.tasks
            },
        getId: (GrowthStageEntity object) => object.id,
        setId: (GrowthStageEntity object, int id) {
          object.id = id;
        },
        objectToFB: (GrowthStageEntity object, fb.Builder fbb) {
          final stageOffset = fbb.writeString(object.stage);
          final durationOffset = fbb.writeString(object.duration);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, stageOffset);
          fbb.addOffset(2, durationOffset);
          fbb.addInt64(3, object.careInstructions.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final stageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final durationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = GrowthStageEntity(
              id: idParam, stage: stageParam, duration: durationParam);
          object.careInstructions.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.careInstructions.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<GrowthStageEntity>(
              object.tasks,
              store,
              obx_int.RelInfo<GrowthStageEntity>.toMany(3, object.id));
          return object;
        }),
    HarvestInfoEntity: obx_int.EntityDefinition<HarvestInfoEntity>(
        model: _entities[14],
        toOneRelations: (HarvestInfoEntity object) =>
            [object.economicAnalysis, object.storage],
        toManyRelations: (HarvestInfoEntity object) => {},
        getId: (HarvestInfoEntity object) => object.id,
        setId: (HarvestInfoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (HarvestInfoEntity object, fb.Builder fbb) {
          final seasonOffset = fbb.writeString(object.season);
          final bestHarvestTimeOffset = fbb.writeString(object.bestHarvestTime);
          final methodOffset = fbb.writeString(object.method);
          final yieldPerTreeOffset = fbb.writeString(object.yieldPerTree);
          final yieldPerAcreOffset = fbb.writeString(object.yieldPerAcre);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, seasonOffset);
          fbb.addOffset(2, bestHarvestTimeOffset);
          fbb.addOffset(3, methodOffset);
          fbb.addOffset(4, yieldPerTreeOffset);
          fbb.addOffset(5, yieldPerAcreOffset);
          fbb.addInt64(6, object.economicAnalysis.targetId);
          fbb.addInt64(7, object.storage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final seasonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bestHarvestTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final methodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final yieldPerTreeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final yieldPerAcreParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = HarvestInfoEntity(
              id: idParam,
              season: seasonParam,
              bestHarvestTime: bestHarvestTimeParam,
              method: methodParam,
              yieldPerTree: yieldPerTreeParam,
              yieldPerAcre: yieldPerAcreParam);
          object.economicAnalysis.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.economicAnalysis.attach(store);
          object.storage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.storage.attach(store);
          return object;
        }),
    MacronutrientsEntity: obx_int.EntityDefinition<MacronutrientsEntity>(
        model: _entities[15],
        toOneRelations: (MacronutrientsEntity object) => [],
        toManyRelations: (MacronutrientsEntity object) => {},
        getId: (MacronutrientsEntity object) => object.id,
        setId: (MacronutrientsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MacronutrientsEntity object, fb.Builder fbb) {
          final nitrogenOffset = fbb.writeString(object.nitrogen);
          final phosphorusOffset = fbb.writeString(object.phosphorus);
          final potassiumOffset = fbb.writeString(object.potassium);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nitrogenOffset);
          fbb.addOffset(2, phosphorusOffset);
          fbb.addOffset(3, potassiumOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nitrogenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final phosphorusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final potassiumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = MacronutrientsEntity(
              id: idParam,
              nitrogen: nitrogenParam,
              phosphorus: phosphorusParam,
              potassium: potassiumParam);

          return object;
        }),
    MicronutrientsEntity: obx_int.EntityDefinition<MicronutrientsEntity>(
        model: _entities[16],
        toOneRelations: (MicronutrientsEntity object) => [],
        toManyRelations: (MicronutrientsEntity object) => {},
        getId: (MicronutrientsEntity object) => object.id,
        setId: (MicronutrientsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MicronutrientsEntity object, fb.Builder fbb) {
          final calciumOffset = fbb.writeString(object.calcium);
          final magnesiumOffset = fbb.writeString(object.magnesium);
          final zincOffset = fbb.writeString(object.zinc);
          final ironOffset = fbb.writeString(object.iron);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, calciumOffset);
          fbb.addOffset(2, magnesiumOffset);
          fbb.addOffset(3, zincOffset);
          fbb.addOffset(4, ironOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final calciumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final magnesiumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final zincParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final ironParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = MicronutrientsEntity(
              id: idParam,
              calcium: calciumParam,
              magnesium: magnesiumParam,
              zinc: zincParam,
              iron: ironParam);

          return object;
        }),
    NpkEntity: obx_int.EntityDefinition<NpkEntity>(
        model: _entities[17],
        toOneRelations: (NpkEntity object) => [],
        toManyRelations: (NpkEntity object) => {},
        getId: (NpkEntity object) => object.id,
        setId: (NpkEntity object, int id) {
          object.id = id;
        },
        objectToFB: (NpkEntity object, fb.Builder fbb) {
          final nitrogenOffset = fbb.writeString(object.nitrogen);
          final phosphorusOffset = fbb.writeString(object.phosphorus);
          final potassiumOffset = fbb.writeString(object.potassium);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nitrogenOffset);
          fbb.addOffset(2, phosphorusOffset);
          fbb.addOffset(3, potassiumOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nitrogenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final phosphorusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final potassiumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = NpkEntity(
              id: idParam,
              nitrogen: nitrogenParam,
              phosphorus: phosphorusParam,
              potassium: potassiumParam);

          return object;
        }),
    NutrientRequirementsEntity: obx_int.EntityDefinition<
            NutrientRequirementsEntity>(
        model: _entities[18],
        toOneRelations: (NutrientRequirementsEntity object) =>
            [object.macronutrients, object.micronutrients],
        toManyRelations: (NutrientRequirementsEntity object) => {
              obx_int.RelInfo<NutrientRequirementsEntity>.toMany(4, object.id):
                  object.fertilizerApplication
            },
        getId: (NutrientRequirementsEntity object) => object.id,
        setId: (NutrientRequirementsEntity object, int id) {
          object.id = id;
        },
        objectToFB: (NutrientRequirementsEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.macronutrients.targetId);
          fbb.addInt64(2, object.micronutrients.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = NutrientRequirementsEntity(id: idParam);
          object.macronutrients.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.macronutrients.attach(store);
          object.micronutrients.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.micronutrients.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<NutrientRequirementsEntity>(
              object.fertilizerApplication,
              store,
              obx_int.RelInfo<NutrientRequirementsEntity>.toMany(4, object.id));
          return object;
        }),
    PestEntity: obx_int.EntityDefinition<PestEntity>(
        model: _entities[19],
        toOneRelations: (PestEntity object) => [],
        toManyRelations: (PestEntity object) => {},
        getId: (PestEntity object) => object.id,
        setId: (PestEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PestEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final symptomsOffset = fbb.writeList(
              object.symptoms.map(fbb.writeString).toList(growable: false));
          final controlMethodsOffset = fbb.writeList(object.controlMethods
              .map(fbb.writeString)
              .toList(growable: false));
          final biologicalControlOffset =
              fbb.writeString(object.biologicalControl);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, symptomsOffset);
          fbb.addOffset(3, controlMethodsOffset);
          fbb.addOffset(4, biologicalControlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final symptomsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 8, []);
          final controlMethodsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final biologicalControlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = PestEntity(
              id: idParam,
              name: nameParam,
              symptoms: symptomsParam,
              controlMethods: controlMethodsParam,
              biologicalControl: biologicalControlParam);

          return object;
        }),
    PlantDataEntity: obx_int.EntityDefinition<PlantDataEntity>(
        model: _entities[20],
        toOneRelations: (PlantDataEntity object) => [
              object.growingConditions,
              object.nutrientRequirements,
              object.pollination,
              object.harvestInfo,
              object.propagationMethods,
              object.climateChangeAdaptation,
              object.traditionalUses,
              object.fertilizerCalculation
            ],
        toManyRelations: (PlantDataEntity object) => {
              obx_int.RelInfo<PlantDataEntity>.toMany(5, object.objectBoxId):
                  object.pests,
              obx_int.RelInfo<PlantDataEntity>.toMany(6, object.objectBoxId):
                  object.disease,
              obx_int.RelInfo<PlantDataEntity>.toMany(7, object.objectBoxId):
                  object.companionPlants,
              obx_int.RelInfo<PlantDataEntity>.toMany(8, object.objectBoxId):
                  object.geneticVarieties,
              obx_int.RelInfo<PlantDataEntity>.toMany(9, object.objectBoxId):
                  object.growthStages
            },
        getId: (PlantDataEntity object) => object.objectBoxId,
        setId: (PlantDataEntity object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (PlantDataEntity object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final plantOffset = fbb.writeString(object.plant);
          final typeOffset = fbb.writeString(object.type);
          final plantClassOffset = fbb.writeString(object.plantClass);
          final scientificNameOffset = fbb.writeString(object.scientificName);
          final imageUrlOffset = fbb.writeList(
              object.imageUrl.map(fbb.writeString).toList(growable: false));
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(17);
          fbb.addInt64(0, object.objectBoxId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, plantOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, plantClassOffset);
          fbb.addOffset(5, scientificNameOffset);
          fbb.addOffset(6, imageUrlOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.addInt64(8, object.growingConditions.targetId);
          fbb.addInt64(9, object.nutrientRequirements.targetId);
          fbb.addInt64(10, object.pollination.targetId);
          fbb.addInt64(11, object.harvestInfo.targetId);
          fbb.addInt64(12, object.propagationMethods.targetId);
          fbb.addInt64(13, object.climateChangeAdaptation.targetId);
          fbb.addInt64(14, object.traditionalUses.targetId);
          fbb.addInt64(15, object.fertilizerCalculation.targetId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final objectBoxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final plantParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final plantClassParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final scientificNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final imageUrlParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = PlantDataEntity(
              objectBoxId: objectBoxIdParam,
              id: idParam,
              plant: plantParam,
              type: typeParam,
              plantClass: plantClassParam,
              scientificName: scientificNameParam,
              imageUrl: imageUrlParam,
              description: descriptionParam);
          object.growingConditions.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.growingConditions.attach(store);
          object.nutrientRequirements.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.nutrientRequirements.attach(store);
          object.pollination.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.pollination.attach(store);
          object.harvestInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.harvestInfo.attach(store);
          object.propagationMethods.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.propagationMethods.attach(store);
          object.climateChangeAdaptation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.climateChangeAdaptation.attach(store);
          object.traditionalUses.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.traditionalUses.attach(store);
          object.fertilizerCalculation.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.fertilizerCalculation.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<PlantDataEntity>(
              object.pests,
              store,
              obx_int.RelInfo<PlantDataEntity>.toMany(5, object.objectBoxId));
          obx_int.InternalToManyAccess.setRelInfo<PlantDataEntity>(
              object.disease,
              store,
              obx_int.RelInfo<PlantDataEntity>.toMany(6, object.objectBoxId));
          obx_int.InternalToManyAccess.setRelInfo<PlantDataEntity>(
              object.companionPlants,
              store,
              obx_int.RelInfo<PlantDataEntity>.toMany(7, object.objectBoxId));
          obx_int.InternalToManyAccess.setRelInfo<PlantDataEntity>(
              object.geneticVarieties,
              store,
              obx_int.RelInfo<PlantDataEntity>.toMany(8, object.objectBoxId));
          obx_int.InternalToManyAccess.setRelInfo<PlantDataEntity>(
              object.growthStages,
              store,
              obx_int.RelInfo<PlantDataEntity>.toMany(9, object.objectBoxId));
          return object;
        }),
    PollinationEntity: obx_int.EntityDefinition<PollinationEntity>(
        model: _entities[21],
        toOneRelations: (PollinationEntity object) => [],
        toManyRelations: (PollinationEntity object) => {},
        getId: (PollinationEntity object) => object.id,
        setId: (PollinationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PollinationEntity object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final pollinatorsOffset = fbb.writeList(
              object.pollinators.map(fbb.writeString).toList(growable: false));
          final floweringSeasonOffset = fbb.writeString(object.floweringSeason);
          final importanceOffset = fbb.writeString(object.importance);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, pollinatorsOffset);
          fbb.addOffset(3, floweringSeasonOffset);
          fbb.addOffset(4, importanceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pollinatorsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 8, []);
          final floweringSeasonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final importanceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = PollinationEntity(
              id: idParam,
              type: typeParam,
              pollinators: pollinatorsParam,
              floweringSeason: floweringSeasonParam,
              importance: importanceParam);

          return object;
        }),
    PropagationMethodsEntity:
        obx_int.EntityDefinition<PropagationMethodsEntity>(
            model: _entities[22],
            toOneRelations: (PropagationMethodsEntity object) => [],
            toManyRelations: (PropagationMethodsEntity object) => {},
            getId: (PropagationMethodsEntity object) => object.id,
            setId: (PropagationMethodsEntity object, int id) {
              object.id = id;
            },
            objectToFB: (PropagationMethodsEntity object, fb.Builder fbb) {
              final seedsOffset = fbb.writeString(object.seeds);
              final graftingOffset = fbb.writeString(object.grafting);
              final airLayeringOffset = fbb.writeString(object.airLayering);
              final tissueCultureOffset = fbb.writeString(object.tissueCulture);
              fbb.startTable(6);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, seedsOffset);
              fbb.addOffset(2, graftingOffset);
              fbb.addOffset(3, airLayeringOffset);
              fbb.addOffset(4, tissueCultureOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final seedsParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final graftingParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, '');
              final airLayeringParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, '');
              final tissueCultureParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, '');
              final object = PropagationMethodsEntity(
                  id: idParam,
                  seeds: seedsParam,
                  grafting: graftingParam,
                  airLayering: airLayeringParam,
                  tissueCulture: tissueCultureParam);

              return object;
            }),
    ReminderConfigEntity: obx_int.EntityDefinition<ReminderConfigEntity>(
        model: _entities[23],
        toOneRelations: (ReminderConfigEntity object) => [],
        toManyRelations: (ReminderConfigEntity object) => {},
        getId: (ReminderConfigEntity object) => object.id,
        setId: (ReminderConfigEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ReminderConfigEntity object, fb.Builder fbb) {
          final timeFrameOffset = fbb.writeString(object.timeFrame);
          final repeatIntervalOffset = fbb.writeString(object.repeatInterval);
          final alertDurationOffset = fbb.writeString(object.alertDuration);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, timeFrameOffset);
          fbb.addOffset(2, repeatIntervalOffset);
          fbb.addOffset(3, alertDurationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final timeFrameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final repeatIntervalParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final alertDurationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = ReminderConfigEntity(
              id: idParam,
              timeFrame: timeFrameParam,
              repeatInterval: repeatIntervalParam,
              alertDuration: alertDurationParam);

          return object;
        }),
    SoilAdjustmentEntity: obx_int.EntityDefinition<SoilAdjustmentEntity>(
        model: _entities[24],
        toOneRelations: (SoilAdjustmentEntity object) =>
            [object.climateAdjustment],
        toManyRelations: (SoilAdjustmentEntity object) => {},
        getId: (SoilAdjustmentEntity object) => object.id,
        setId: (SoilAdjustmentEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SoilAdjustmentEntity object, fb.Builder fbb) {
          final soilTypeOffset = fbb.writeString(object.soilType);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, soilTypeOffset);
          fbb.addInt64(2, object.climateAdjustment.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final soilTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object =
              SoilAdjustmentEntity(id: idParam, soilType: soilTypeParam);
          object.climateAdjustment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.climateAdjustment.attach(store);
          return object;
        }),
    StageFertilizerEntity: obx_int.EntityDefinition<StageFertilizerEntity>(
        model: _entities[25],
        toOneRelations: (StageFertilizerEntity object) =>
            [object.fertilizerQuantity, object.soilAdjustment],
        toManyRelations: (StageFertilizerEntity object) => {},
        getId: (StageFertilizerEntity object) => object.id,
        setId: (StageFertilizerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (StageFertilizerEntity object, fb.Builder fbb) {
          final stageOffset = fbb.writeString(object.stage);
          final fertilizerTypeOffset = fbb.writeString(object.fertilizerType);
          final importanceOffset = fbb.writeString(object.importance);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, stageOffset);
          fbb.addOffset(2, fertilizerTypeOffset);
          fbb.addInt64(3, object.fertilizerQuantity.targetId);
          fbb.addInt64(4, object.soilAdjustment.targetId);
          fbb.addOffset(5, importanceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final stageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final fertilizerTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final importanceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = StageFertilizerEntity(
              id: idParam,
              stage: stageParam,
              fertilizerType: fertilizerTypeParam,
              importance: importanceParam);
          object.fertilizerQuantity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.fertilizerQuantity.attach(store);
          object.soilAdjustment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.soilAdjustment.attach(store);
          return object;
        }),
    StorageEntity: obx_int.EntityDefinition<StorageEntity>(
        model: _entities[26],
        toOneRelations: (StorageEntity object) => [],
        toManyRelations: (StorageEntity object) => {},
        getId: (StorageEntity object) => object.id,
        setId: (StorageEntity object, int id) {
          object.id = id;
        },
        objectToFB: (StorageEntity object, fb.Builder fbb) {
          final shelfLifeOffset = fbb.writeString(object.shelfLife);
          final bestStorageConditionsOffset =
              fbb.writeString(object.bestStorageConditions);
          final storageInnovationsOffset = fbb.writeList(object
              .storageInnovations
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, shelfLifeOffset);
          fbb.addOffset(2, bestStorageConditionsOffset);
          fbb.addOffset(3, storageInnovationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final shelfLifeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bestStorageConditionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final storageInnovationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = StorageEntity(
              id: idParam,
              shelfLife: shelfLifeParam,
              bestStorageConditions: bestStorageConditionsParam,
              storageInnovations: storageInnovationsParam);

          return object;
        }),
    TaskEntity: obx_int.EntityDefinition<TaskEntity>(
        model: _entities[27],
        toOneRelations: (TaskEntity object) => [object.reminderConfig],
        toManyRelations: (TaskEntity object) => {},
        getId: (TaskEntity object) => object.id,
        setId: (TaskEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TaskEntity object, fb.Builder fbb) {
          final taskNameOffset = fbb.writeString(object.taskName);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskNameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.reminderConfig.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final taskNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = TaskEntity(
              id: idParam,
              taskName: taskNameParam,
              description: descriptionParam);
          object.reminderConfig.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.reminderConfig.attach(store);
          return object;
        }),
    TraditionalUsesEntity: obx_int.EntityDefinition<TraditionalUsesEntity>(
        model: _entities[28],
        toOneRelations: (TraditionalUsesEntity object) => [],
        toManyRelations: (TraditionalUsesEntity object) => {},
        getId: (TraditionalUsesEntity object) => object.id,
        setId: (TraditionalUsesEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TraditionalUsesEntity object, fb.Builder fbb) {
          final ayurvedaOffset = fbb.writeString(object.ayurveda);
          final folkMedicineOffset = fbb.writeString(object.folkMedicine);
          final culinaryUsesOffset = fbb.writeList(
              object.culinaryUses.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ayurvedaOffset);
          fbb.addOffset(2, folkMedicineOffset);
          fbb.addOffset(3, culinaryUsesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final ayurvedaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final folkMedicineParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final culinaryUsesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final object = TraditionalUsesEntity(
              id: idParam,
              ayurveda: ayurvedaParam,
              folkMedicine: folkMedicineParam,
              culinaryUses: culinaryUsesParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CalculationMethodologyEntity] entity fields to define ObjectBox queries.
class CalculationMethodologyEntity_ {
  /// See [CalculationMethodologyEntity.id].
  static final id = obx.QueryIntegerProperty<CalculationMethodologyEntity>(
      _entities[0].properties[0]);

  /// See [CalculationMethodologyEntity.fertilizerRequirementFormula].
  static final fertilizerRequirementFormula =
      obx.QueryStringProperty<CalculationMethodologyEntity>(
          _entities[0].properties[1]);
}

/// [CareInstructionsEntity] entity fields to define ObjectBox queries.
class CareInstructionsEntity_ {
  /// See [CareInstructionsEntity.id].
  static final id = obx.QueryIntegerProperty<CareInstructionsEntity>(
      _entities[1].properties[0]);

  /// See [CareInstructionsEntity.temperature].
  static final temperature = obx.QueryStringProperty<CareInstructionsEntity>(
      _entities[1].properties[1]);

  /// See [CareInstructionsEntity.soilType].
  static final soilType = obx.QueryStringProperty<CareInstructionsEntity>(
      _entities[1].properties[2]);

  /// See [CareInstructionsEntity.watering].
  static final watering = obx.QueryStringProperty<CareInstructionsEntity>(
      _entities[1].properties[3]);

  /// See [CareInstructionsEntity.sunlight].
  static final sunlight = obx.QueryStringProperty<CareInstructionsEntity>(
      _entities[1].properties[4]);

  /// See [CareInstructionsEntity.fertilization].
  static final fertilization = obx.QueryStringProperty<CareInstructionsEntity>(
      _entities[1].properties[5]);
}

/// [ClimateAdjustmentEntity] entity fields to define ObjectBox queries.
class ClimateAdjustmentEntity_ {
  /// See [ClimateAdjustmentEntity.id].
  static final id = obx.QueryIntegerProperty<ClimateAdjustmentEntity>(
      _entities[2].properties[0]);

  /// See [ClimateAdjustmentEntity.temperature].
  static final temperature = obx.QueryStringProperty<ClimateAdjustmentEntity>(
      _entities[2].properties[1]);

  /// See [ClimateAdjustmentEntity.humidity].
  static final humidity = obx.QueryStringProperty<ClimateAdjustmentEntity>(
      _entities[2].properties[2]);
}

/// [ClimateChangeAdaptationEntity] entity fields to define ObjectBox queries.
class ClimateChangeAdaptationEntity_ {
  /// See [ClimateChangeAdaptationEntity.id].
  static final id = obx.QueryIntegerProperty<ClimateChangeAdaptationEntity>(
      _entities[3].properties[0]);

  /// See [ClimateChangeAdaptationEntity.floodResistance].
  static final floodResistance =
      obx.QueryStringProperty<ClimateChangeAdaptationEntity>(
          _entities[3].properties[1]);

  /// See [ClimateChangeAdaptationEntity.extremeHeatResistance].
  static final extremeHeatResistance =
      obx.QueryStringProperty<ClimateChangeAdaptationEntity>(
          _entities[3].properties[2]);

  /// See [ClimateChangeAdaptationEntity.stormProtection].
  static final stormProtection =
      obx.QueryStringProperty<ClimateChangeAdaptationEntity>(
          _entities[3].properties[3]);
}

/// [ClimateSuitabilityEntity] entity fields to define ObjectBox queries.
class ClimateSuitabilityEntity_ {
  /// See [ClimateSuitabilityEntity.id].
  static final id = obx.QueryIntegerProperty<ClimateSuitabilityEntity>(
      _entities[4].properties[0]);

  /// See [ClimateSuitabilityEntity.region].
  static final region = obx.QueryStringProperty<ClimateSuitabilityEntity>(
      _entities[4].properties[1]);

  /// See [ClimateSuitabilityEntity.climate].
  static final climate = obx.QueryStringProperty<ClimateSuitabilityEntity>(
      _entities[4].properties[2]);
}

/// [CompanionPlantEntity] entity fields to define ObjectBox queries.
class CompanionPlantEntity_ {
  /// See [CompanionPlantEntity.id].
  static final id = obx.QueryIntegerProperty<CompanionPlantEntity>(
      _entities[5].properties[0]);

  /// See [CompanionPlantEntity.plant].
  static final plant =
      obx.QueryStringProperty<CompanionPlantEntity>(_entities[5].properties[1]);

  /// See [CompanionPlantEntity.benefit].
  static final benefit =
      obx.QueryStringProperty<CompanionPlantEntity>(_entities[5].properties[2]);
}

/// [DiseaseEntity] entity fields to define ObjectBox queries.
class DiseaseEntity_ {
  /// See [DiseaseEntity.id].
  static final id =
      obx.QueryIntegerProperty<DiseaseEntity>(_entities[6].properties[0]);

  /// See [DiseaseEntity.name].
  static final name =
      obx.QueryStringProperty<DiseaseEntity>(_entities[6].properties[1]);

  /// See [DiseaseEntity.symptoms].
  static final symptoms =
      obx.QueryStringVectorProperty<DiseaseEntity>(_entities[6].properties[2]);

  /// See [DiseaseEntity.remedy].
  static final remedy =
      obx.QueryStringVectorProperty<DiseaseEntity>(_entities[6].properties[3]);
}

/// [EconomicAnalysisEntity] entity fields to define ObjectBox queries.
class EconomicAnalysisEntity_ {
  /// See [EconomicAnalysisEntity.id].
  static final id = obx.QueryIntegerProperty<EconomicAnalysisEntity>(
      _entities[7].properties[0]);

  /// See [EconomicAnalysisEntity.costOfCultivation].
  static final costOfCultivation =
      obx.QueryStringProperty<EconomicAnalysisEntity>(
          _entities[7].properties[1]);

  /// See [EconomicAnalysisEntity.expectedRevenue].
  static final expectedRevenue =
      obx.QueryStringProperty<EconomicAnalysisEntity>(
          _entities[7].properties[2]);

  /// See [EconomicAnalysisEntity.profitMargin].
  static final profitMargin = obx.QueryStringProperty<EconomicAnalysisEntity>(
      _entities[7].properties[3]);

  /// See [EconomicAnalysisEntity.roi].
  static final roi = obx.QueryStringProperty<EconomicAnalysisEntity>(
      _entities[7].properties[4]);
}

/// [FertilizerApplicationEntity] entity fields to define ObjectBox queries.
class FertilizerApplicationEntity_ {
  /// See [FertilizerApplicationEntity.id].
  static final id = obx.QueryIntegerProperty<FertilizerApplicationEntity>(
      _entities[8].properties[0]);

  /// See [FertilizerApplicationEntity.stage].
  static final stage = obx.QueryStringProperty<FertilizerApplicationEntity>(
      _entities[8].properties[1]);

  /// See [FertilizerApplicationEntity.fertilizerType].
  static final fertilizerType =
      obx.QueryStringProperty<FertilizerApplicationEntity>(
          _entities[8].properties[2]);

  /// See [FertilizerApplicationEntity.applicationFrequency].
  static final applicationFrequency =
      obx.QueryStringProperty<FertilizerApplicationEntity>(
          _entities[8].properties[3]);

  /// See [FertilizerApplicationEntity.importance].
  static final importance =
      obx.QueryStringProperty<FertilizerApplicationEntity>(
          _entities[8].properties[4]);
}

/// [FertilizerCalculationEntity] entity fields to define ObjectBox queries.
class FertilizerCalculationEntity_ {
  /// See [FertilizerCalculationEntity.id].
  static final id = obx.QueryIntegerProperty<FertilizerCalculationEntity>(
      _entities[9].properties[0]);

  /// See [FertilizerCalculationEntity.calculationMethodology].
  static final calculationMethodology = obx.QueryRelationToOne<
      FertilizerCalculationEntity,
      CalculationMethodologyEntity>(_entities[9].properties[1]);

  /// see [FertilizerCalculationEntity.stages]
  static final stages = obx.QueryRelationToMany<FertilizerCalculationEntity,
      StageFertilizerEntity>(_entities[9].relations[0]);
}

/// [FertilizerQuantityEntity] entity fields to define ObjectBox queries.
class FertilizerQuantityEntity_ {
  /// See [FertilizerQuantityEntity.id].
  static final id = obx.QueryIntegerProperty<FertilizerQuantityEntity>(
      _entities[10].properties[0]);

  /// See [FertilizerQuantityEntity.npk].
  static final npk =
      obx.QueryRelationToOne<FertilizerQuantityEntity, NpkEntity>(
          _entities[10].properties[1]);

  /// See [FertilizerQuantityEntity.compost].
  static final compost = obx.QueryStringProperty<FertilizerQuantityEntity>(
      _entities[10].properties[2]);

  /// See [FertilizerQuantityEntity.frequency].
  static final frequency = obx.QueryStringProperty<FertilizerQuantityEntity>(
      _entities[10].properties[3]);
}

/// [GeneticVarietyEntity] entity fields to define ObjectBox queries.
class GeneticVarietyEntity_ {
  /// See [GeneticVarietyEntity.id].
  static final id = obx.QueryIntegerProperty<GeneticVarietyEntity>(
      _entities[11].properties[0]);

  /// See [GeneticVarietyEntity.variety].
  static final variety = obx.QueryStringProperty<GeneticVarietyEntity>(
      _entities[11].properties[1]);

  /// See [GeneticVarietyEntity.characteristics].
  static final characteristics = obx.QueryStringProperty<GeneticVarietyEntity>(
      _entities[11].properties[2]);
}

/// [GrowingConditionsEntity] entity fields to define ObjectBox queries.
class GrowingConditionsEntity_ {
  /// See [GrowingConditionsEntity.id].
  static final id = obx.QueryIntegerProperty<GrowingConditionsEntity>(
      _entities[12].properties[0]);

  /// See [GrowingConditionsEntity.sunlight].
  static final sunlight = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[1]);

  /// See [GrowingConditionsEntity.water].
  static final water = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[2]);

  /// See [GrowingConditionsEntity.temperature].
  static final temperature = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[3]);

  /// See [GrowingConditionsEntity.humidity].
  static final humidity = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[4]);

  /// See [GrowingConditionsEntity.soilType].
  static final soilType = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[5]);

  /// See [GrowingConditionsEntity.soilPH].
  static final soilPH = obx.QueryStringProperty<GrowingConditionsEntity>(
      _entities[12].properties[6]);

  /// See [GrowingConditionsEntity.windResistance].
  static final windResistance =
      obx.QueryStringProperty<GrowingConditionsEntity>(
          _entities[12].properties[7]);

  /// See [GrowingConditionsEntity.frostTolerance].
  static final frostTolerance =
      obx.QueryStringProperty<GrowingConditionsEntity>(
          _entities[12].properties[8]);

  /// See [GrowingConditionsEntity.droughtTolerance].
  static final droughtTolerance =
      obx.QueryStringProperty<GrowingConditionsEntity>(
          _entities[12].properties[9]);

  /// see [GrowingConditionsEntity.climateSuitability]
  static final climateSuitability = obx.QueryRelationToMany<
      GrowingConditionsEntity,
      ClimateSuitabilityEntity>(_entities[12].relations[0]);
}

/// [GrowthStageEntity] entity fields to define ObjectBox queries.
class GrowthStageEntity_ {
  /// See [GrowthStageEntity.id].
  static final id =
      obx.QueryIntegerProperty<GrowthStageEntity>(_entities[13].properties[0]);

  /// See [GrowthStageEntity.stage].
  static final stage =
      obx.QueryStringProperty<GrowthStageEntity>(_entities[13].properties[1]);

  /// See [GrowthStageEntity.duration].
  static final duration =
      obx.QueryStringProperty<GrowthStageEntity>(_entities[13].properties[2]);

  /// See [GrowthStageEntity.careInstructions].
  static final careInstructions =
      obx.QueryRelationToOne<GrowthStageEntity, CareInstructionsEntity>(
          _entities[13].properties[3]);

  /// see [GrowthStageEntity.tasks]
  static final tasks = obx.QueryRelationToMany<GrowthStageEntity, TaskEntity>(
      _entities[13].relations[0]);
}

/// [HarvestInfoEntity] entity fields to define ObjectBox queries.
class HarvestInfoEntity_ {
  /// See [HarvestInfoEntity.id].
  static final id =
      obx.QueryIntegerProperty<HarvestInfoEntity>(_entities[14].properties[0]);

  /// See [HarvestInfoEntity.season].
  static final season =
      obx.QueryStringProperty<HarvestInfoEntity>(_entities[14].properties[1]);

  /// See [HarvestInfoEntity.bestHarvestTime].
  static final bestHarvestTime =
      obx.QueryStringProperty<HarvestInfoEntity>(_entities[14].properties[2]);

  /// See [HarvestInfoEntity.method].
  static final method =
      obx.QueryStringProperty<HarvestInfoEntity>(_entities[14].properties[3]);

  /// See [HarvestInfoEntity.yieldPerTree].
  static final yieldPerTree =
      obx.QueryStringProperty<HarvestInfoEntity>(_entities[14].properties[4]);

  /// See [HarvestInfoEntity.yieldPerAcre].
  static final yieldPerAcre =
      obx.QueryStringProperty<HarvestInfoEntity>(_entities[14].properties[5]);

  /// See [HarvestInfoEntity.economicAnalysis].
  static final economicAnalysis =
      obx.QueryRelationToOne<HarvestInfoEntity, EconomicAnalysisEntity>(
          _entities[14].properties[6]);

  /// See [HarvestInfoEntity.storage].
  static final storage =
      obx.QueryRelationToOne<HarvestInfoEntity, StorageEntity>(
          _entities[14].properties[7]);
}

/// [MacronutrientsEntity] entity fields to define ObjectBox queries.
class MacronutrientsEntity_ {
  /// See [MacronutrientsEntity.id].
  static final id = obx.QueryIntegerProperty<MacronutrientsEntity>(
      _entities[15].properties[0]);

  /// See [MacronutrientsEntity.nitrogen].
  static final nitrogen = obx.QueryStringProperty<MacronutrientsEntity>(
      _entities[15].properties[1]);

  /// See [MacronutrientsEntity.phosphorus].
  static final phosphorus = obx.QueryStringProperty<MacronutrientsEntity>(
      _entities[15].properties[2]);

  /// See [MacronutrientsEntity.potassium].
  static final potassium = obx.QueryStringProperty<MacronutrientsEntity>(
      _entities[15].properties[3]);
}

/// [MicronutrientsEntity] entity fields to define ObjectBox queries.
class MicronutrientsEntity_ {
  /// See [MicronutrientsEntity.id].
  static final id = obx.QueryIntegerProperty<MicronutrientsEntity>(
      _entities[16].properties[0]);

  /// See [MicronutrientsEntity.calcium].
  static final calcium = obx.QueryStringProperty<MicronutrientsEntity>(
      _entities[16].properties[1]);

  /// See [MicronutrientsEntity.magnesium].
  static final magnesium = obx.QueryStringProperty<MicronutrientsEntity>(
      _entities[16].properties[2]);

  /// See [MicronutrientsEntity.zinc].
  static final zinc = obx.QueryStringProperty<MicronutrientsEntity>(
      _entities[16].properties[3]);

  /// See [MicronutrientsEntity.iron].
  static final iron = obx.QueryStringProperty<MicronutrientsEntity>(
      _entities[16].properties[4]);
}

/// [NpkEntity] entity fields to define ObjectBox queries.
class NpkEntity_ {
  /// See [NpkEntity.id].
  static final id =
      obx.QueryIntegerProperty<NpkEntity>(_entities[17].properties[0]);

  /// See [NpkEntity.nitrogen].
  static final nitrogen =
      obx.QueryStringProperty<NpkEntity>(_entities[17].properties[1]);

  /// See [NpkEntity.phosphorus].
  static final phosphorus =
      obx.QueryStringProperty<NpkEntity>(_entities[17].properties[2]);

  /// See [NpkEntity.potassium].
  static final potassium =
      obx.QueryStringProperty<NpkEntity>(_entities[17].properties[3]);
}

/// [NutrientRequirementsEntity] entity fields to define ObjectBox queries.
class NutrientRequirementsEntity_ {
  /// See [NutrientRequirementsEntity.id].
  static final id = obx.QueryIntegerProperty<NutrientRequirementsEntity>(
      _entities[18].properties[0]);

  /// See [NutrientRequirementsEntity.macronutrients].
  static final macronutrients =
      obx.QueryRelationToOne<NutrientRequirementsEntity, MacronutrientsEntity>(
          _entities[18].properties[1]);

  /// See [NutrientRequirementsEntity.micronutrients].
  static final micronutrients =
      obx.QueryRelationToOne<NutrientRequirementsEntity, MicronutrientsEntity>(
          _entities[18].properties[2]);

  /// see [NutrientRequirementsEntity.fertilizerApplication]
  static final fertilizerApplication = obx.QueryRelationToMany<
      NutrientRequirementsEntity,
      FertilizerApplicationEntity>(_entities[18].relations[0]);
}

/// [PestEntity] entity fields to define ObjectBox queries.
class PestEntity_ {
  /// See [PestEntity.id].
  static final id =
      obx.QueryIntegerProperty<PestEntity>(_entities[19].properties[0]);

  /// See [PestEntity.name].
  static final name =
      obx.QueryStringProperty<PestEntity>(_entities[19].properties[1]);

  /// See [PestEntity.symptoms].
  static final symptoms =
      obx.QueryStringVectorProperty<PestEntity>(_entities[19].properties[2]);

  /// See [PestEntity.controlMethods].
  static final controlMethods =
      obx.QueryStringVectorProperty<PestEntity>(_entities[19].properties[3]);

  /// See [PestEntity.biologicalControl].
  static final biologicalControl =
      obx.QueryStringProperty<PestEntity>(_entities[19].properties[4]);
}

/// [PlantDataEntity] entity fields to define ObjectBox queries.
class PlantDataEntity_ {
  /// See [PlantDataEntity.objectBoxId].
  static final objectBoxId =
      obx.QueryIntegerProperty<PlantDataEntity>(_entities[20].properties[0]);

  /// See [PlantDataEntity.id].
  static final id =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[1]);

  /// See [PlantDataEntity.plant].
  static final plant =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[2]);

  /// See [PlantDataEntity.type].
  static final type =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[3]);

  /// See [PlantDataEntity.plantClass].
  static final plantClass =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[4]);

  /// See [PlantDataEntity.scientificName].
  static final scientificName =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[5]);

  /// See [PlantDataEntity.imageUrl].
  static final imageUrl = obx.QueryStringVectorProperty<PlantDataEntity>(
      _entities[20].properties[6]);

  /// See [PlantDataEntity.description].
  static final description =
      obx.QueryStringProperty<PlantDataEntity>(_entities[20].properties[7]);

  /// See [PlantDataEntity.growingConditions].
  static final growingConditions =
      obx.QueryRelationToOne<PlantDataEntity, GrowingConditionsEntity>(
          _entities[20].properties[8]);

  /// See [PlantDataEntity.nutrientRequirements].
  static final nutrientRequirements =
      obx.QueryRelationToOne<PlantDataEntity, NutrientRequirementsEntity>(
          _entities[20].properties[9]);

  /// See [PlantDataEntity.pollination].
  static final pollination =
      obx.QueryRelationToOne<PlantDataEntity, PollinationEntity>(
          _entities[20].properties[10]);

  /// See [PlantDataEntity.harvestInfo].
  static final harvestInfo =
      obx.QueryRelationToOne<PlantDataEntity, HarvestInfoEntity>(
          _entities[20].properties[11]);

  /// See [PlantDataEntity.propagationMethods].
  static final propagationMethods =
      obx.QueryRelationToOne<PlantDataEntity, PropagationMethodsEntity>(
          _entities[20].properties[12]);

  /// See [PlantDataEntity.climateChangeAdaptation].
  static final climateChangeAdaptation =
      obx.QueryRelationToOne<PlantDataEntity, ClimateChangeAdaptationEntity>(
          _entities[20].properties[13]);

  /// See [PlantDataEntity.traditionalUses].
  static final traditionalUses =
      obx.QueryRelationToOne<PlantDataEntity, TraditionalUsesEntity>(
          _entities[20].properties[14]);

  /// See [PlantDataEntity.fertilizerCalculation].
  static final fertilizerCalculation =
      obx.QueryRelationToOne<PlantDataEntity, FertilizerCalculationEntity>(
          _entities[20].properties[15]);

  /// see [PlantDataEntity.pests]
  static final pests = obx.QueryRelationToMany<PlantDataEntity, PestEntity>(
      _entities[20].relations[0]);

  /// see [PlantDataEntity.disease]
  static final disease =
      obx.QueryRelationToMany<PlantDataEntity, DiseaseEntity>(
          _entities[20].relations[1]);

  /// see [PlantDataEntity.companionPlants]
  static final companionPlants =
      obx.QueryRelationToMany<PlantDataEntity, CompanionPlantEntity>(
          _entities[20].relations[2]);

  /// see [PlantDataEntity.geneticVarieties]
  static final geneticVarieties =
      obx.QueryRelationToMany<PlantDataEntity, GeneticVarietyEntity>(
          _entities[20].relations[3]);

  /// see [PlantDataEntity.growthStages]
  static final growthStages =
      obx.QueryRelationToMany<PlantDataEntity, GrowthStageEntity>(
          _entities[20].relations[4]);
}

/// [PollinationEntity] entity fields to define ObjectBox queries.
class PollinationEntity_ {
  /// See [PollinationEntity.id].
  static final id =
      obx.QueryIntegerProperty<PollinationEntity>(_entities[21].properties[0]);

  /// See [PollinationEntity.type].
  static final type =
      obx.QueryStringProperty<PollinationEntity>(_entities[21].properties[1]);

  /// See [PollinationEntity.pollinators].
  static final pollinators = obx.QueryStringVectorProperty<PollinationEntity>(
      _entities[21].properties[2]);

  /// See [PollinationEntity.floweringSeason].
  static final floweringSeason =
      obx.QueryStringProperty<PollinationEntity>(_entities[21].properties[3]);

  /// See [PollinationEntity.importance].
  static final importance =
      obx.QueryStringProperty<PollinationEntity>(_entities[21].properties[4]);
}

/// [PropagationMethodsEntity] entity fields to define ObjectBox queries.
class PropagationMethodsEntity_ {
  /// See [PropagationMethodsEntity.id].
  static final id = obx.QueryIntegerProperty<PropagationMethodsEntity>(
      _entities[22].properties[0]);

  /// See [PropagationMethodsEntity.seeds].
  static final seeds = obx.QueryStringProperty<PropagationMethodsEntity>(
      _entities[22].properties[1]);

  /// See [PropagationMethodsEntity.grafting].
  static final grafting = obx.QueryStringProperty<PropagationMethodsEntity>(
      _entities[22].properties[2]);

  /// See [PropagationMethodsEntity.airLayering].
  static final airLayering = obx.QueryStringProperty<PropagationMethodsEntity>(
      _entities[22].properties[3]);

  /// See [PropagationMethodsEntity.tissueCulture].
  static final tissueCulture =
      obx.QueryStringProperty<PropagationMethodsEntity>(
          _entities[22].properties[4]);
}

/// [ReminderConfigEntity] entity fields to define ObjectBox queries.
class ReminderConfigEntity_ {
  /// See [ReminderConfigEntity.id].
  static final id = obx.QueryIntegerProperty<ReminderConfigEntity>(
      _entities[23].properties[0]);

  /// See [ReminderConfigEntity.timeFrame].
  static final timeFrame = obx.QueryStringProperty<ReminderConfigEntity>(
      _entities[23].properties[1]);

  /// See [ReminderConfigEntity.repeatInterval].
  static final repeatInterval = obx.QueryStringProperty<ReminderConfigEntity>(
      _entities[23].properties[2]);

  /// See [ReminderConfigEntity.alertDuration].
  static final alertDuration = obx.QueryStringProperty<ReminderConfigEntity>(
      _entities[23].properties[3]);
}

/// [SoilAdjustmentEntity] entity fields to define ObjectBox queries.
class SoilAdjustmentEntity_ {
  /// See [SoilAdjustmentEntity.id].
  static final id = obx.QueryIntegerProperty<SoilAdjustmentEntity>(
      _entities[24].properties[0]);

  /// See [SoilAdjustmentEntity.soilType].
  static final soilType = obx.QueryStringProperty<SoilAdjustmentEntity>(
      _entities[24].properties[1]);

  /// See [SoilAdjustmentEntity.climateAdjustment].
  static final climateAdjustment =
      obx.QueryRelationToOne<SoilAdjustmentEntity, ClimateAdjustmentEntity>(
          _entities[24].properties[2]);
}

/// [StageFertilizerEntity] entity fields to define ObjectBox queries.
class StageFertilizerEntity_ {
  /// See [StageFertilizerEntity.id].
  static final id = obx.QueryIntegerProperty<StageFertilizerEntity>(
      _entities[25].properties[0]);

  /// See [StageFertilizerEntity.stage].
  static final stage = obx.QueryStringProperty<StageFertilizerEntity>(
      _entities[25].properties[1]);

  /// See [StageFertilizerEntity.fertilizerType].
  static final fertilizerType = obx.QueryStringProperty<StageFertilizerEntity>(
      _entities[25].properties[2]);

  /// See [StageFertilizerEntity.fertilizerQuantity].
  static final fertilizerQuantity =
      obx.QueryRelationToOne<StageFertilizerEntity, FertilizerQuantityEntity>(
          _entities[25].properties[3]);

  /// See [StageFertilizerEntity.soilAdjustment].
  static final soilAdjustment =
      obx.QueryRelationToOne<StageFertilizerEntity, SoilAdjustmentEntity>(
          _entities[25].properties[4]);

  /// See [StageFertilizerEntity.importance].
  static final importance = obx.QueryStringProperty<StageFertilizerEntity>(
      _entities[25].properties[5]);
}

/// [StorageEntity] entity fields to define ObjectBox queries.
class StorageEntity_ {
  /// See [StorageEntity.id].
  static final id =
      obx.QueryIntegerProperty<StorageEntity>(_entities[26].properties[0]);

  /// See [StorageEntity.shelfLife].
  static final shelfLife =
      obx.QueryStringProperty<StorageEntity>(_entities[26].properties[1]);

  /// See [StorageEntity.bestStorageConditions].
  static final bestStorageConditions =
      obx.QueryStringProperty<StorageEntity>(_entities[26].properties[2]);

  /// See [StorageEntity.storageInnovations].
  static final storageInnovations =
      obx.QueryStringVectorProperty<StorageEntity>(_entities[26].properties[3]);
}

/// [TaskEntity] entity fields to define ObjectBox queries.
class TaskEntity_ {
  /// See [TaskEntity.id].
  static final id =
      obx.QueryIntegerProperty<TaskEntity>(_entities[27].properties[0]);

  /// See [TaskEntity.taskName].
  static final taskName =
      obx.QueryStringProperty<TaskEntity>(_entities[27].properties[1]);

  /// See [TaskEntity.description].
  static final description =
      obx.QueryStringProperty<TaskEntity>(_entities[27].properties[2]);

  /// See [TaskEntity.reminderConfig].
  static final reminderConfig =
      obx.QueryRelationToOne<TaskEntity, ReminderConfigEntity>(
          _entities[27].properties[3]);
}

/// [TraditionalUsesEntity] entity fields to define ObjectBox queries.
class TraditionalUsesEntity_ {
  /// See [TraditionalUsesEntity.id].
  static final id = obx.QueryIntegerProperty<TraditionalUsesEntity>(
      _entities[28].properties[0]);

  /// See [TraditionalUsesEntity.ayurveda].
  static final ayurveda = obx.QueryStringProperty<TraditionalUsesEntity>(
      _entities[28].properties[1]);

  /// See [TraditionalUsesEntity.folkMedicine].
  static final folkMedicine = obx.QueryStringProperty<TraditionalUsesEntity>(
      _entities[28].properties[2]);

  /// See [TraditionalUsesEntity.culinaryUses].
  static final culinaryUses =
      obx.QueryStringVectorProperty<TraditionalUsesEntity>(
          _entities[28].properties[3]);
}
